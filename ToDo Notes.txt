
Jared:
+ Create GeometrySet class
- Create Edge class
- Set up gravestones arrays
- Create vertex->set of edges
- Create edge->set of tets

Philip:
- Initialize vertex->set of edges and edge->set of tets GeometrySets
- Handle vertex/tet_statuses array changes -> Change to enums INSIDE/OUTSIDE please
- Handle edge collapsing/split
- Fix visualizer (Visualizer needs to look at vertex/tet gravestones)
~~~

Keep track of:
- vertex -> set of edges
- edge -> set of tets

Create vertex gravestones array
Create tet gravestones array

vertex_statuses array goes away
Create tet_statuses array

Create Edge structure
- Has hashable long value of concatenated vertex index ints
- Must have overloaded == operator

Can find a face's boundary status by checking the status of its opposite tet

Make Set class, can do insert, union, intersect, remove, subtract

When collapsing an edge:
1) Kill the two vertices of the edge.  Delete their entries in the vertex->edges map and gravestone them.
2) Make set of tets A and B where A=vertex(a)->tets and B=vertex(b)->tets
3) The intersection of A and B is the two tets to delete.  Gravestone them.
4) The union of A and B minus the intersection of A and B are tets that get modified
5) For all edges in all modified tets, remove entries in edges->tets map
6) Create new vertex c
7) For each modified tet, change a to c and b to c
8) When creating vertex->edges for new vertex c, find set of all vertex neighbors of a and b using vertex->edges (excluding a and b) and make edges from c to all of them
9) For all edges in all modified tets, recreate their edges->tets entries

When splitting an edge:
*This assumes a drawing of tet ABDE, with edge A-B being split with vertex C being created at the midpoint of A-B*
1) Make set of tets SPLIT where SPLIT=edge(a-b)->tets
2) Delete edges->tets entries like so:
- For all edges e of all tets in SPLIT:
-- For all tets t in edges(e)->tets
--- If t is in SPLIT, remove t from edges(e)->tets
3) vertex(c)->edges adds edge a-c and b-c
4) For tet t in SPLIT
4a) vertex(d)->edges adds c-d
4b) vertex(e)->edges adds c-e
4c) vertex(c)->edges adds c-d and c-e
4d) Create new tets ACDE and ABCD
4e) Gravestone tet ABDE
4f) For all edges e in new tet ACDE, add ACDE to edges(e)->tets
4g) For all edges e in new tet ABCD, add ABCD to edges(e)->tets

sudo:
split = edge->tets( a->b )
c = new vertex
delete all edges in split
v-e[ c ] = c->a + c->b
for t in split:
	get d , e
	v-e [ d ]  +=  c->d
	v-e [ e ]  +=  c->e
	t1 = acde new
	t2 = abcd new
	v-e [ c ]  += c->d + c->e
	gravestone abde
	add all edfes in t1, t2

	for u->v  in t1
		add t1 to e-t [ u->v ]
	for u->v in t2
		add t2 to e-t [ u->v ]

delete a->b
for u->v in split
	for t in e-t [u->v]
		if t is in split:
			remove t from e-t [u->v]


~~~ Example code for using the GeometrySet class:

GeometrySet<int> gs, gs2;
for (int i = 3; i < 100; i += 3) { gs.insert(i); }
for (int i = 5; i < 100; i += 5) { gs2.insert(i); }

const std::vector<int> unioned = gs.unionWith(gs2).getItems();
const std::vector<int> intersected = gs.intersect(gs2).getItems();

std::cout << "== UNION ==" << std::endl;
for (size_t i = 0; i < unioned.size(); i++) {
	std::cout << unioned[i] << ", ";
}
std::cout << std::endl << "== INTERSECTION ==" << std::endl;
for (size_t i = 0; i < intersected.size(); i++) {
	std::cout << intersected[i] << ", ";
}
std::cout << std::endl;
